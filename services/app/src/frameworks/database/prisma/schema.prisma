generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model chat_comments {
  id         Int        @id @default(autoincrement())
  room_id    Int
  user_id    Int
  body       String     @db.Text
  created_at DateTime   @default(now()) @db.Timestamp(0)
  chat_rooms chat_rooms @relation(fields: [room_id], references: [id], onUpdate: Restrict, map: "ref_chats_comments_room_id")
  users      users      @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "ref_chats_comments_user_id")

  @@index([room_id], map: "ref_chats_comments_room_id")
  @@index([user_id], map: "ref_chats_comments_user_id")
}

model chat_rooms {
  id            Int             @id @default(autoincrement())
  project_id    Int
  name          String          @db.Text
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  projects      projects        @relation(fields: [project_id], references: [id], onUpdate: Restrict, map: "ref_chats_rooms_project_id")
  chat_comments chat_comments[]

  @@index([project_id], map: "ref_chats_rooms_project_id")
}

model feature_suggestions {
  id                           Int                            @id @default(autoincrement())
  project_id                   Int
  proposer_id                  Int
  title                        String                         @db.Text
  description                  String                         @db.Text
  status                       Boolean                        @default(false)
  vendor_approval              Boolean                        @default(false)
  client_approval              Boolean                        @default(false)
  projects                     projects                       @relation(fields: [project_id], references: [id], onUpdate: Restrict, map: "ref_feature-suggestions_project_id")
  users                        users                          @relation(fields: [proposer_id], references: [id], onUpdate: Restrict, map: "ref_feature-suggestions_proposer_id")
  feature_suggestions_comments feature_suggestions_comments[]

  @@index([project_id], map: "ref_feature-suggestions_project_id")
  @@index([proposer_id], map: "ref_feature-suggestions_proposer_id")
  @@map("feature-suggestions")
}

model feature_suggestions_comments {
  id                  Int                 @id @default(autoincrement())
  suggestion_id       Int
  user_id             Int
  content             String              @db.Text
  created_at          DateTime            @default(now()) @db.Timestamp(0)
  feature_suggestions feature_suggestions @relation(fields: [suggestion_id], references: [id], map: "ref_feature-suggestions_comments_suggestions_id")
  users               users               @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "ref_feature-suggestions_comments_user_id")

  @@index([suggestion_id], map: "ref_feature-suggestions_comments_suggestion_id")
  @@index([user_id], map: "ref_feature-suggestions_comments_user_id")
  @@map("feature-suggestions_comments")
}

model projects {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  description         String                @db.VarChar(255)
  updated_at          DateTime              @default(now()) @db.Timestamp(0)
  delete_flag         Boolean               @default(false)
  chat_rooms          chat_rooms[]
  feature_suggestions feature_suggestions[]
  projects_members    projects_members[]
  tasks               tasks[]
}

model projects_members {
  project_id  Int
  user_id     Int
  role_id     Int
  delete_flag Boolean  @default(false)
  projects    projects @relation(fields: [project_id], references: [id], onUpdate: Restrict, map: "ref_projects_members_project_id")
  roles       roles    @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "ref_projects_members_role_id")
  users       users    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "ref_projects_members_user_id")

  @@unique([project_id, user_id], map: "project_id")
  @@index([role_id], map: "ref_projects_members_role_id")
  @@index([user_id], map: "ref_projects_members_user_id")
}

model roles {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(50)
  weight           Int
  projects_members projects_members[]
}

model tasks {
  id          Int      @id @default(autoincrement())
  project_id  Int
  title       String   @db.Text
  description String   @db.Text
  status      String   @db.Text
  due         DateTime @db.Date
  priority    String   @db.Text
  projects    projects @relation(fields: [project_id], references: [id], onUpdate: Restrict, map: "ref_tasks_project_id")

  @@index([project_id], map: "ref_tasks_project_id")
}

model users {
  id                           Int                            @id @default(autoincrement())
  nickname                     String                         @db.VarChar(255)
  chat_comments                chat_comments[]
  feature_suggestions          feature_suggestions[]
  feature_suggestions_comments feature_suggestions_comments[]
  projects_members             projects_members[]
  users_auths                  users_auths[]
}

model users_auths {
  id            Int    @id @default(autoincrement())
  user_id       Int
  identity_type String @db.VarChar(255)
  identifier    String @db.Text
  credential    String @db.Text
  users         users  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "ref_users_auths_user_id")

  @@index([user_id], map: "ref_users_auths_user_id")
}
